document.addEventListener('DOMContentLoaded', function() {
    console.log("JavaScript is running!");

    // Размеры экрана
    var ww = window.innerWidth, wh = window.innerHeight;

    // Получаем DOM элементы
    var canvas = document.getElementById("c");
    var menuBtn = document.querySelector('.menu-btn');
    var logoText = document.querySelector('.logo-text');
    var overlayMask = document.querySelector('.overlay-mask');
    var activePopup = null;
    
    // Элементы для полноэкранного просмотра
    var fullscreenView = document.querySelector('.fullscreen-view');
    var fullscreenMedia = document.querySelector('.fullscreen-media');
    var closeFullscreenBtn = document.querySelector('.close-fullscreen');
    var currentFullscreenMedia = null;

    // Настройка canvas с учётом devicePixelRatio для чёткости
    var dpr = window.devicePixelRatio || 1;
    canvas.width = ww * dpr;
    canvas.height = wh * dpr;
    var ctx = canvas.getContext("2d");
    ctx.scale(dpr, dpr);
    canvas.style.width = ww + "px";
    canvas.style.height = wh + "px";

    // Параметры куба
    var linesX = 14, linesY = 14, pointsPerLine = 10;
    var letters = "UNIVERSEDESIGN";
    var focale = 500;
    var defaultRotationX = -0.4, defaultRotationY = 0.5;
    var autoRotateSpeed = 0.0002;
    
    // Всегда начинаем с хаотичного состояния при первом посещении
    var tParam = 1; // 1 = хаос, 0 = собранный куб
    var rotationX = 0;
    var rotationY = 0;

    // Управление жестами
    var drag = false, oldX = 0, oldY = 0;
    var scrollThreshold = (ww < 768) ? 50 : 100;
    var scrollAccumulator = 0;
    var touchStartY = 0;

    // Для анимации
    var lastTime = 0;

    // Система логирования
    var debugLog = {
        lastFrameTime: performance.now(),
        frameDeltas: [],
        isLogging: true,
        maxLogs: 60, // Хранить данные за последние 60 кадров
        
        logFrame: function(time) {
            if (!this.isLogging) return;
            
            const currentTime = performance.now();
            const frameDelta = currentTime - this.lastFrameTime;
            this.lastFrameTime = currentTime;
            
            // Сохраняем время кадра
            this.frameDeltas.push({
                time: currentTime,
                delta: frameDelta,
                fps: 1000 / frameDelta,
                tParam: tParam,
                rotation: { x: rotationX, y: rotationY }
            });
            
            // Ограничиваем количество логов
            if (this.frameDeltas.length > this.maxLogs) {
                this.frameDeltas.shift();
            }
            
            // Выводим предупреждение если кадр занял больше 32мс (меньше 30 FPS)
            if (frameDelta > 32) {
                console.warn(`Низкий FPS: ${(1000 / frameDelta).toFixed(1)} FPS (${frameDelta.toFixed(2)}мс)`);
            }
        },
        
        logAction: function(action, data) {
            if (!this.isLogging) return;
            console.log(`Действие: ${action}`, {
                time: performance.now(),
                tParam: tParam,
                rotation: { x: rotationX, y: rotationY },
                ...data
            });
        },
        
        getAverageFPS: function() {
            if (this.frameDeltas.length === 0) return 0;
            const sum = this.frameDeltas.reduce((acc, frame) => acc + frame.fps, 0);
            return (sum / this.frameDeltas.length).toFixed(1);
        }
    };

    // Массив точек
    var pointsArray = [];

    // Класс Point
    function Point(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.originalX = x;
        this.originalY = y;
        this.originalZ = z;
        this.scatterX = Math.random() * 2000 - 1000;
        this.scatterY = Math.random() * 2000 - 1000;
        this.scatterZ = Math.random() * 2000 - 1000;
    }

    Point.prototype.rotateX = function(angle) {
        var cosA = Math.cos(angle), sinA = Math.sin(angle);
        var y = this.y * cosA - this.z * sinA;
        var z = this.y * sinA + this.z * cosA;
        this.y = y; this.z = z;
    };

    Point.prototype.rotateY = function(angle) {
        var cosA = Math.cos(angle), sinA = Math.sin(angle);
        var x = this.x * cosA + this.z * sinA;
        var z = -this.x * sinA + this.z * cosA;
        this.x = x; this.z = z;
    };

    Point.prototype.draw = function(i, j) {
        var scale = focale / (focale + this.z);
        if (j === linesY - 1 && tParam <= 0.1) {
            ctx.font = "bold 14px OneDay";
            ctx.fillStyle = "#ffffff";
        } else {
            ctx.font = "14px OneDay";
            var bf = 1 - (this.z + 1000) / 2000;
            bf = Math.max(0, Math.min(1, bf));
            var shade = Math.floor(128 + bf * 127);
            ctx.fillStyle = "rgb(" + shade + "," + shade + "," + shade + ")";
        }
        var xPos = ww / 2 + this.x * scale;
        var yPos = wh / 2 + this.y * scale;
        var text = letters[i % letters.length];
        ctx.fillText(text, xPos, yPos);
    };

    function getCubeSize() {
        var w = window.innerWidth;
        if (w < 576) return 180;
        if (w < 768) return 220;
        if (w < 992) return 260;
        if (w < 1200) return 300;
        if (w < 1400) return 340;
        return 360;
    }

    function createPoints() {
        pointsArray = [];
        var cubeSize = getCubeSize();
        var spaceX = cubeSize / linesX;
        var spaceY = cubeSize / linesY;
        var topZ = cubeSize / 2;
        var botZ = -cubeSize / 2;
        for (var j = 0; j < linesY; j++) {
            for (var i = 0; i < linesX; i++) {
                var x = -cubeSize / 2 + i * spaceX;
                var y = -cubeSize / 2 + j * spaceY;
                for (var k = 0; k < pointsPerLine; k++) {
                    var z = topZ + (botZ - topZ) / pointsPerLine * k;
                    var point = new Point(x, y, z);
                    pointsArray.push(point);
                }
            }
        }
    }
    createPoints();

    function drawPoints() {
        // Проверяем, что массив точек не пустой
        if (pointsArray.length === 0) {
            console.error("Массив точек пуст!");
            return;
        }
        
        console.log("Отрисовка точек, tParam =", tParam);
        
        for (var i = 0; i < linesX; i++) {
            for (var j = 0; j < linesY; j++) {
                for (var k = 0; k < pointsPerLine; k++) {
                    var idx = i * linesY * pointsPerLine + j * pointsPerLine + k;
                    
                    // Проверяем, что индекс в пределах массива
                    if (idx >= pointsArray.length) {
                        console.error("Индекс за пределами массива:", idx, "размер массива:", pointsArray.length);
                        continue;
                    }
                    
                    var point = pointsArray[idx];
                    point.x = (1 - tParam) * point.originalX + tParam * point.scatterX;
                    point.y = (1 - tParam) * point.originalY + tParam * point.scatterY;
                    point.z = (1 - tParam) * point.originalZ + tParam * point.scatterZ;
                    point.rotateX(rotationX);
                    point.rotateY(rotationY);
                    point.draw(i, j);
                }
            }
        }
    }

    function render(time) {
        var deltaTime = time - lastTime;
        lastTime = time;

        // Ограничиваем deltaTime, чтобы избежать скачков при низком FPS
        if (deltaTime > 100) deltaTime = 100;

        ctx.fillStyle = "#000000";
        ctx.fillRect(0, 0, ww, wh);

        // Сохраняем предыдущее значение tParam для отслеживания изменений
        var prevTParam = tParam;
        
        drawPoints();
        debugLog.logFrame(time);

        if (!drag) {
            rotationY += autoRotateSpeed * deltaTime;
        }
        
        // Проверяем, изменилось ли tParam
        if (prevTParam !== tParam) {
            console.log("tParam изменился с", prevTParam, "на", tParam);
        }
        
        // Проверяем состояние куба и обновляем видимость элементов
        if (tParam === 0) {
            // Куб собран - показываем элементы
            if (menuBtn.style.display !== "block") {
                console.log("Показываем элементы интерфейса (куб собран)");
                menuBtn.style.display = "block";
                logoText.style.display = "block";
                menuBtn.classList.add('visible');
                logoText.classList.add('visible');
            }
        } else {
            // Куб рассеян - скрываем элементы
            if (menuBtn.style.display !== "none") {
                console.log("Скрываем элементы интерфейса (куб рассеян)");
                menuBtn.classList.remove('visible');
                logoText.classList.remove('visible');
                menuBtn.style.display = "none";
                logoText.style.display = "none";
            }
            
            // Скрываем все оверлеи
            var overlays = document.querySelectorAll('.overlay-menu, .popup-block, .overlay-mask');
            overlays.forEach(function(el) {
                if (el.style.display !== "none") {
                    el.classList.remove('visible');
                    el.style.display = "none";
                }
            });
        }

        requestAnimationFrame(render);
    }
    requestAnimationFrame(render);

    function onResize() {
        ww = window.innerWidth;
        wh = window.innerHeight;
        var dpr = window.devicePixelRatio || 1;
        canvas.width = ww * dpr;
        canvas.height = wh * dpr;
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.scale(dpr, dpr);
        canvas.style.width = ww + "px";
        canvas.style.height = wh + "px";
        createPoints();
    }
    window.addEventListener('resize', onResize);
    window.addEventListener('orientationchange', function() {
        setTimeout(onResize, 500);
    });
    onResize();

    canvas.addEventListener('mousedown', function(e) {
        handleStart(e.pageX, e.pageY);
    });
    canvas.addEventListener('mousemove', function(e) {
        handleMove(e.pageX, e.pageY);
    });
    canvas.addEventListener('mouseup', handleEnd);
    canvas.addEventListener('mouseleave', handleEnd);

    // Добавляем обработчики тач-событий на уровне документа
    document.addEventListener('touchstart', function(e) {
        console.log("Document touchstart event");
        touchStartY = e.touches[0].pageY;
    }, { passive: true });
    
    document.addEventListener('touchmove', function(e) {
        console.log("Document touchmove event");
        var touchY = e.touches[0].pageY;
        var deltaY = touchStartY - touchY;
        console.log("Document touch deltaY:", deltaY);
        
        // Если deltaY достаточно большой, считаем это свайпом
        if (Math.abs(deltaY) > 30) {
            if (deltaY > 0) {
                console.log("Document swipe up detected");
                animateScatter();
            } else {
                console.log("Document swipe down detected");
                animateGather();
            }
        }
        
        touchStartY = touchY;
    }, { passive: true });

    canvas.addEventListener('touchend', function(e) {
        e.preventDefault();
        handleEnd();
    }, { passive: false });

    function handleStart(x, y) {
        drag = true;
        oldX = x;
        oldY = y;
    }
    function handleMove(x, y) {
        if (drag) {
            rotationY += (x - oldX) * 0.01;
            rotationX += (y - oldY) * 0.01;
            oldX = x;
            oldY = y;
        }
    }
    function handleEnd() {
        drag = false;
    }

    function handleScroll(deltaY) {
        console.log("handleScroll вызван с deltaY:", deltaY);
        debugLog.logAction('scroll', { deltaY, scrollAccumulator });
        scrollAccumulator += deltaY;
        console.log("Scroll accumulator:", scrollAccumulator, "Threshold:", scrollThreshold);
        
        // Быстрый свайп - сразу срабатываем
        if (Math.abs(deltaY) > 50) {
            if (deltaY > 0) {
                console.log("Fast swipe up - triggering scatter");
                animateScatter();
            } else {
                console.log("Fast swipe down - triggering gather");
                animateGather();
            }
            scrollAccumulator = 0;
            return;
        }
        
        // Накопительный свайп
        if (scrollAccumulator > scrollThreshold) {
            console.log("Accumulated swipe up - triggering scatter");
            animateScatter();
            scrollAccumulator = 0;
        } else if (scrollAccumulator < -scrollThreshold) {
            console.log("Accumulated swipe down - triggering gather");
            animateGather();
            scrollAccumulator = 0;
        }
    }
    canvas.addEventListener('wheel', function(e) {
        console.log("Wheel event:", e.deltaY);
        e.preventDefault();
        handleScroll(e.deltaY);
    });

    function animateGather() {
        debugLog.logAction('gather_start', { initTParam: tParam });
        console.log("Animating gather - начинаем сборку куба");
        
        // Если куб уже собран, ничего не делаем
        if (tParam === 0) {
            console.log("Cube already gathered - куб уже собран");
            return;
        }
        
        var startTime = performance.now();
        var initT = tParam;
        var duration = 1500;
        console.log("Начальное значение tParam:", initT);
        
        function step(currentTime) {
            var elapsed = currentTime - startTime;
            var progress = Math.min(elapsed / duration, 1);
            tParam = initT * (1 - progress);
            console.log("Анимация сборки: progress =", progress, "tParam =", tParam);
            
            if (progress < 1) {
                requestAnimationFrame(step);
            } else {
                tParam = 0;
                console.log("Анимация сборки завершена, tParam =", tParam);
                debugLog.logAction('gather_complete', {});
            }
        }
        requestAnimationFrame(step);
    }

    // Инициализация иконки жеста
    console.log("DOMContentLoaded event fired");
    console.log("tParam value:", tParam);
    
    if (tParam !== 0) {
        menuBtn.style.display = "none";
        logoText.style.display = "none";
        menuBtn.classList.remove('visible');
        logoText.classList.remove('visible');
        
        // Показываем иконку жеста при первой загрузке
        const gestureHint = document.querySelector('.gesture-hint');
        console.log("Gesture hint element:", gestureHint);
        
        if (gestureHint) {
            // Проверяем, есть ли иконка внутри
            const gestureIcon = gestureHint.querySelector('.gesture-icon');
            console.log("Gesture icon element:", gestureIcon);
            
            // Проверяем стили
            console.log("Gesture hint styles:", window.getComputedStyle(gestureHint));
            if (gestureIcon) {
                console.log("Gesture icon styles:", window.getComputedStyle(gestureIcon));
            }
            
            // Принудительно показываем иконку
            gestureHint.style.display = "flex";
            gestureHint.style.opacity = "1";
            gestureHint.style.zIndex = "9999";
            
            console.log("Showing gesture hint immediately");
            gestureHint.classList.add('visible');
            
            // Функция для скрытия подсказки
            const hideGestureHint = () => {
                console.log("Hiding gesture hint");
                gestureHint.classList.remove('visible');
            };
            
            // Скрываем подсказку при взаимодействии
            gestureHint.addEventListener('click', hideGestureHint);
            gestureHint.addEventListener('touchstart', hideGestureHint);
            canvas.addEventListener('mousedown', hideGestureHint, { once: true });
            canvas.addEventListener('touchstart', hideGestureHint, { once: true });
            
            // Скрываем подсказку через 10 секунд
            setTimeout(() => {
                console.log("Timeout triggered to hide gesture hint");
                hideGestureHint();
            }, 10000);
        } else {
            console.error("Gesture hint element not found!");
        }
    }

    function animateScatter() {
        debugLog.logAction('scatter_start', { initTParam: tParam });
        console.log("Animating scatter - начинаем рассеивание куба");
        
        // Если куб уже рассеян, ничего не делаем
        if (tParam === 1) {
            console.log("Cube already scattered - куб уже рассеян");
            return;
        }
        
        var startTime = performance.now();
        var initT = tParam;
        var duration = 1500;
        console.log("Начальное значение tParam:", initT);
        
        function step(currentTime) {
            var elapsed = currentTime - startTime;
            var progress = Math.min(elapsed / duration, 1);
            tParam = initT + (1 - initT) * progress;
            console.log("Анимация рассеивания: progress =", progress, "tParam =", tParam);
            
            if (progress < 1) {
                requestAnimationFrame(step);
            } else {
                tParam = 1;
                console.log("Анимация рассеивания завершена, tParam =", tParam);
                debugLog.logAction('scatter_complete', {});
                
                // Показываем иконку жеста после рассеивания
                const gestureHint = document.querySelector('.gesture-hint');
                if (gestureHint) {
                    console.log("Показываем иконку жеста после рассеивания");
                    setTimeout(() => {
                        gestureHint.classList.add('visible');
                        console.log("Иконка жеста должна быть видна");
                    }, 500);
                    
                    // Функция для скрытия подсказки
                    const hideGestureHint = () => {
                        console.log("Скрываем иконку жеста");
                        gestureHint.classList.remove('visible');
                    };
                    
                    // Скрываем подсказку при взаимодействии
                    gestureHint.addEventListener('click', hideGestureHint);
                    gestureHint.addEventListener('touchstart', hideGestureHint);
                    canvas.addEventListener('mousedown', hideGestureHint, { once: true });
                    canvas.addEventListener('touchstart', hideGestureHint, { once: true });
                    
                    // Скрываем подсказку через 7 секунд
                    setTimeout(hideGestureHint, 7000);
                } else {
                    console.error("Элемент gesture-hint не найден!");
                }
            }
        }
        requestAnimationFrame(step);
    }

    var menuOverlay = document.querySelector('.overlay-menu');
    if (menuBtn) {
        menuBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            if (menuOverlay.classList.contains('visible')) {
                menuOverlay.classList.remove('visible');
                setTimeout(() => {
                    menuOverlay.style.display = "none";
                }, 400);
            } else {
                menuOverlay.style.display = "block";
                requestAnimationFrame(() => {
                    menuOverlay.classList.add('visible');
                });
            }
        });
    }

    if (logoText) {
        // Удаляем обработчик клика с логотипа
        logoText.style.pointerEvents = 'none';
        logoText.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
        });
    }

    document.addEventListener('click', function(e) {
        if (activePopup && !e.target.closest('.popup-block') && !e.target.closest('.overlay-menu') && !e.target.closest('.menu-btn')) {
            overlayMask.classList.remove('visible');
            activePopup.classList.remove('visible');
            setTimeout(() => {
                overlayMask.style.display = "none";
                activePopup.style.display = "none";
                activePopup = null;
            }, 400);
        }
    });

    var menuLinks = document.querySelectorAll('.overlay-menu a');
    menuLinks.forEach(function(link) {
        link.addEventListener('click', function(e) {
            // Если это не ссылка с data-section, позволяем стандартное поведение
            if (!this.dataset.section) {
                return;
            }
            
            e.preventDefault();
            e.stopPropagation();
            var section = this.dataset.section;
            
            // Показываем маску и попап с анимацией
            overlayMask.style.display = 'block';
            activePopup = document.getElementById(section);
            if (activePopup) {
                activePopup.style.display = 'block';
                // Добавляем небольшую задержку для плавности
                setTimeout(() => {
                    overlayMask.classList.add('visible');
                    activePopup.classList.add('visible');
                }, 20);
            }
        });
    });

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && activePopup) {
            overlayMask.classList.remove('visible');
            activePopup.classList.remove('visible');
            setTimeout(() => {
                overlayMask.style.display = "none";
                activePopup.style.display = "none";
                activePopup = null;
            }, 1200);
        }
    });

    // Функция для открытия модального окна проекта
    async function openProjectModal(projectId) {
        console.log('Opening project page for project:', projectId);
        
        // Перенаправляем на страницу проекта вместо открытия модального окна
        let projectPath = projectId === 1 ? 'intervals2023' : `project_${projectId}`;
        let projectUrl = `projects/${projectPath}/index.html`;
        
        console.log('Redirecting to:', projectUrl);
        window.location.href = projectUrl;
        return;
        
        // Оставшийся код не будет выполняться из-за return выше
    }
    
    // Функция для закрытия модального окна проекта
    function closeProjectModal(modal) {
        // Возвращаем исходный URL
        window.history.pushState({}, '', window.location.pathname);
        
        modal.classList.remove('visible');
        setTimeout(() => {
            modal.remove();
        }, 400);
    }

    // Добавляем обработчики для проектов
    document.querySelectorAll('.project-item').forEach((item, index) => {
        console.log("Adding click handler for project item:", item);
        const projectId = parseInt(item.getAttribute('data-project-id')) || (index + 1);
        if (!projectId) {
            console.error("Project item without data-project-id:", item);
            return;
        }
        
        item.addEventListener('click', () => {
            console.log("Project item clicked:", projectId);
            openProjectModal(projectId);
        });
    });

    // Обработчик для History API
    window.addEventListener('popstate', function(event) {
        // Закрываем все открытые модальные окна проектов
        const openModals = document.querySelectorAll('.project-modal');
        openModals.forEach(modal => {
            modal.classList.remove('visible');
            setTimeout(() => {
                modal.remove();
            }, 400);
        });
        
        // Если в URL есть хэш с проектом, открываем его
        if (window.location.hash.startsWith('#project/')) {
            const projectPath = window.location.hash.replace('#project/', '');
            let projectId;
            
            if (projectPath === 'intervals2023') {
                projectId = 1;
            } else {
                const match = projectPath.match(/project_(\d+)/);
                if (match) {
                    projectId = parseInt(match[1]);
                }
            }
            
            if (projectId) {
                openProjectModal(projectId);
            }
        }
    });

    console.log("All event listeners attached");

    // Функции для полноэкранного просмотра
    let currentFullscreenIndex = 0;
    let fullscreenImages = [];

    function openFullscreen(mediaElement) {
        // Удаляем старый fullscreenView, если он существует
        if (fullscreenView) {
            fullscreenView.remove();
        }

        // Создаем новый fullscreenView каждый раз
        fullscreenView = document.createElement('div');
        fullscreenView.className = 'fullscreen-view';
        document.body.appendChild(fullscreenView);

        const content = document.createElement('div');
        content.className = 'fullscreen-content';
        fullscreenView.appendChild(content);

        const mediaContainer = document.createElement('div');
        mediaContainer.className = 'fullscreen-media';
        content.appendChild(mediaContainer);

        const closeBtn = document.createElement('button');
        closeBtn.className = 'close-fullscreen';
        closeBtn.innerHTML = '×';
        content.appendChild(closeBtn);

        const nextBtn = document.createElement('button');
        nextBtn.className = 'next-fullscreen';
        content.appendChild(nextBtn);

        // Добавляем обработчики событий
        closeBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            closeFullscreen();
        });
        
        nextBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            showNextImage();
        });

        fullscreenMedia = mediaContainer;

        // Получаем все изображения и видео в текущем проекте, исключая логотип Behance
        const projectContent = mediaElement.closest('.modal-slides');
        fullscreenImages = Array.from(projectContent.querySelectorAll('.slide img, iframe:not([src*="player.vimeo.com/api"])')).filter(el => !el.closest('.behance-link'));
        currentFullscreenIndex = fullscreenImages.indexOf(mediaElement);

        // Показываем контент
        showCurrentMedia();
        
        // Добавляем обработчики клавиш
        document.addEventListener('keydown', handleFullscreenKeyPress);

        // Активируем полноэкранный режим
        requestAnimationFrame(() => {
            fullscreenView.classList.add('active');
        });

        // Добавляем обработчики для свайпов
        let touchStartX = 0;
        let touchEndX = 0;
        
        fullscreenView.addEventListener('touchstart', function(e) {
            touchStartX = e.changedTouches[0].screenX;
        }, { passive: true });
        
        fullscreenView.addEventListener('touchend', function(e) {
            touchEndX = e.changedTouches[0].screenX;
            handleSwipe();
        }, { passive: true });
        
        function handleSwipe() {
            const swipeThreshold = 50; // Минимальное расстояние для свайпа
            const swipeLength = touchEndX - touchStartX;
            
            if (Math.abs(swipeLength) > swipeThreshold) {
                if (swipeLength > 0) {
                    // Свайп вправо - предыдущее изображение
                    showPreviousImage();
                } else {
                    // Свайп влево - следующее изображение
                    showNextImage();
                }
            }
        }
        
        function showPreviousImage() {
            currentFullscreenIndex = (currentFullscreenIndex - 1 + fullscreenImages.length) % fullscreenImages.length;
            showCurrentMedia();
        }
    }

    // Функция для показа текущего медиа
    function showCurrentMedia() {
        const media = fullscreenImages[currentFullscreenIndex];
        
        // Очищаем контейнер
        fullscreenMedia.innerHTML = '';
        
        if (media.tagName.toLowerCase() === 'iframe') {
            // Создаем статичный прелоадер
            const preloader = document.createElement('div');
            preloader.textContent = 'Загрузка видео...'; // Текст прелоадера
            preloader.style.fontSize = '18px';
            preloader.style.color = '#fff';
            preloader.style.textAlign = 'center';
            preloader.style.padding = '20px';
            fullscreenMedia.appendChild(preloader);
            
            // Загружаем видео после прелоадера
            const iframe = document.createElement('iframe');
            iframe.src = media.src;
            iframe.width = '100%';
            iframe.height = '100%';
            iframe.style.aspectRatio = '16/9';
            iframe.frameBorder = '0';
            iframe.allow = 'autoplay; fullscreen; picture-in-picture';
            iframe.onload = function() {
                fullscreenMedia.innerHTML = ''; // Очищаем контейнер перед добавлением видео
                fullscreenMedia.appendChild(iframe);
            };
        } else {
            // Клонируем изображение
            const clone = media.cloneNode();
            fullscreenMedia.appendChild(clone);
        }
    }

    // Функция для показа следующего изображения
    function showNextImage() {
        currentFullscreenIndex = (currentFullscreenIndex + 1) % fullscreenImages.length;
        showCurrentMedia();
    }

    // Функция для показа предыдущего изображения
    function showPreviousImage() {
        currentFullscreenIndex = (currentFullscreenIndex - 1 + fullscreenImages.length) % fullscreenImages.length;
        showCurrentMedia();
    }

    // Обработчик нажатий клавиш в полноэкранном режиме
    function handleFullscreenKeyPress(e) {
        if (e.key === 'Escape') {
            closeFullscreen();
        } else if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {
            e.key === 'ArrowRight' ? showNextImage() : showPreviousImage();
        }
    }

    // Функция закрытия полноэкранного режима
    function closeFullscreen() {
        if (fullscreenView) {
            fullscreenView.classList.remove('active');
            document.removeEventListener('keydown', handleFullscreenKeyPress);
            
            // Останавливаем видео при закрытии
            const iframe = fullscreenMedia.querySelector('iframe');
            if (iframe) {
                iframe.src = '';
            }

            // Удаляем элемент после анимации
            setTimeout(() => {
                fullscreenView.remove();
                fullscreenView = null;
                fullscreenMedia = null;
            }, 300);
        }
    }

    if (menuOverlay) {
        menuOverlay.addEventListener('click', function(e) {
            e.stopPropagation();
        });
    }

    document.addEventListener('click', function(e) {
        if (!e.target.closest('.overlay-menu') && !e.target.closest('.menu-btn') && menuOverlay.classList.contains('visible')) {
            menuOverlay.classList.remove('visible');
            setTimeout(() => {
                menuOverlay.style.display = "none";
            }, 400);
        }
    });
});
